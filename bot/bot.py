from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from unidecode import unidecode
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram import Update, WebAppInfo, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, ContextTypes


# N√£o precisamos mais de BytesIO se vamos ler do disco
# from io import BytesIO

# Importamos os para lidar com caminhos de arquivo
import os


perfuracao_keywords = ['perfuracao','po√ßo']
estrutura_keywords = ['estrutura','cano', 'tubo', 'revestimento', 'revestido']
tipo_keywords = ['simples','complexo']

keyboard = [
    ['üíß Solicitar or√ßamento'],
    ['üìû Falar com atendente'],
    ['üì¶ Ver equipamentos']
]


WEB_APP_URL = "https://macpocos.com.br"

TOKEN = "7566851462:AAHF4TACvtHyYbDRf7_HlqgRBxbQXGLjmzk"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üìç Abrir Coordenada", callback_data='ver_mapa')],
         [InlineKeyboardButton("üìä Ver Estat√≠sticas", callback_data='ver_dados')],
         [InlineKeyboardButton("üñ® Gerar Or√ßamento", callback_data='ver_dados')],
         [InlineKeyboardButton("üí¨ Contato", url="https://t.me/seu_usuario")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
        
    await update.message.reply_text("Escolha uma op√ß√£o:", reply_markup=reply_markup)

    # Tratador dos bot√µes
    async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "ver_mapa":
            await query.edit_message_text(text="üó∫Ô∏è Aguardando... carregando o mapa.")
            # aqui voc√™ poderia enviar a imagem, ou link interativo do mapa
            await context.bot.send_photo(chat_id=query.message.chat_id, photo=open("mapa.png", "rb"))

        elif query.data == "ver_dados":
            await query.edit_message_text(text="üìä Dados da regi√£o:\n- Po√ßos: 23\n- Profundidade m√©dia: 42m")

async def responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mensagem = update.message.text
    await update.message.reply_text(f"Recebi sua mensagem: {mensagem}\nAgora vou interpretar e gerar o or√ßamento...")
    mensagem = unidecode(mensagem.lower())
    for keyword in tipo_keywords:
        
        if keyword.lower() in mensagem.lower():
            if keyword.lower() == "simples":
                await update.message.reply_text(f"Aqui est√° um or√ßamento de po√ßo {keyword}")

                
            if keyword.lower() == "completo":
                await update.message.reply_text(f"Aqui est√° um or√ßamento de po√ßo {keyword}")
            

async def pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # --- CORRE√á√ÉO AQUI ---
    # Define o caminho para o arquivo PDF
    # 'os.path.join' √© usado para construir caminhos de forma segura em diferentes SOs
    # 'os.path.dirname(__file__)' obt√©m o diret√≥rio do script atual
    # Depois navegamos para '..' (diret√≥rio acima) e ent√£o para 'TEMPLATES/TESTE.PDF'
    pdf_path = os.path.join(os.path.dirname(__file__),'..', 'budget', 'teste.pdf')

    # Verifica se o arquivo realmente existe antes de tentar enviar
    if os.path.exists(pdf_path):
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=open(pdf_path, 'rb'), # Abre o arquivo em modo bin√°rio de leitura
            filename='orcamento.pdf' # O nome que o usu√°rio ver√° no Telegram
        )
        await update.message.reply_text("Or√ßamento em PDF enviado!")
    else:
        await update.message.reply_text(f"Erro: O arquivo PDF '{pdf_path}' n√£o foi encontrado. Por favor, verifique o caminho.")
    # --- FIM DA CORRE√á√ÉO ---

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder))

    print("Bot rodando...")
    app.run_polling()

if __name__ == '__main__':
    main()